name: CICD-Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  HELM_VERSION: "v3.14.4"
  IMAGE_NAME: "nodeenergy.azurecr.io/ppa-predictions"
  IMAGE_HASH: "${{ github.sha }}"
  RESOURCE_GROUP_NAME: "optinode"
  CLUSTER_NAME: "optinode-production"
  NAMESPACE: "ppa"
  PIP_EXTRA_INDEX_URL: ${{ secrets.PIP_EXTRA_INDEX_URL }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.AZURE_CLIENT_ID }}
          password: ${{ secrets.AZURE_CLIENT_PASSWORD }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and export production image
        uses: docker/build-push-action@v5
        with:
          context: .
          tags: ${{ env.IMAGE_NAME }}
          target: "production-stage"
          outputs: type=docker,dest=/tmp/prodimage.tar
          secrets: |
            PIP_EXTRA_INDEX_URL=${{ secrets.PIP_EXTRA_INDEX_URL }}
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}

      - name: Build and export test image
        uses: docker/build-push-action@v5
        with:
          context: .
          tags: ${{ env.IMAGE_NAME }}
          target: "test-stage"
          outputs: type=docker,dest=/tmp/testimage.tar
          secrets: |
            PIP_EXTRA_INDEX_URL=${{ secrets.PIP_EXTRA_INDEX_URL }}  

      - name: upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: testimage
          path: /tmp/testimage.tar

      - name: upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: prodimage
          path: /tmp/prodimage.tar

#  test:
#    runs-on: ubuntu-latest
#    needs: [ build ]
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v4
#
#      - name: Download artifact
#        uses: actions/download-artifact@v4
#        with:
#          name: testimage
#          path: /tmp
#
#      - name: Load image
#        run: docker load --input /tmp/testimage.tar
#
#      - name: Run pytest in Docker container
#        run: docker run -v ./tests/:/code/tests --rm ${{ env.IMAGE_NAME }} pytest

  publish_image_and_deploy:
    if: github.event_name == 'push' # ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs: [ build ]
    permissions:
      actions: read
      contents: read
      id-token: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        username: ${{ secrets.AZURE_CLIENT_ID }}
        password: ${{ secrets.AZURE_CLIENT_PASSWORD }}

    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: prodimage
        path: /tmp
    - name: Load image
      run: docker load --input /tmp/prodimage.tar

    - name: 'Push image'
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        username: ${{ secrets.AZURE_CLIENT_ID }}
        password: ${{ secrets.AZURE_CLIENT_PASSWORD }}
    - run: docker push ${{ env.IMAGE_NAME }}

    - name: Log in with Azure
      uses: azure/login@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'

    - name: Set up kubelogin for non-interactive login
      uses: azure/use-kubelogin@v1
      with:
        kubelogin-version: 'v0.0.25'

    - name: Get K8s context
      uses: azure/aks-set-context@v3
      with:
        resource-group: ${{ env.RESOURCE_GROUP_NAME }}
        cluster-name: ${{ env.CLUSTER_NAME }}
        admin: 'false'
        use-kubelogin: 'true'

    - name: List current directory
      run: ls -al

    - name: List Helm chart directory
      run: ls -al './kubernetes'

    - name: Bake deployment
      uses: azure/k8s-bake@v2.4
      with:
        renderEngine: 'helm'
        helmChart: './kubernetes'
        helm-version: ${{ env.HELM_VERSION }}
        overrideFiles: './kubernetes/prod-values.yaml'
      id: bake

    - name: Deploy application
      uses: Azure/k8s-deploy@v4
      with:
        action: deploy
        manifests: ${{ steps.bake.outputs.manifestsBundle }}
        namespace: ${{ env.NAMESPACE }}
        images: ${{ env.IMAGE_NAME }}
