name: CICD-Workflow

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  HELM_VERSION: "v3.14.4"
  IMAGE_NAME: "nodeenergy.azurecr.io/ppa-predictions"
  IMAGE_HASH: "${{ github.sha }}"
  NAMESPACE: "ppa"
  PIP_EXTRA_INDEX_URL: ${{ secrets.PIP_EXTRA_INDEX_URL }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.AZURE_CLIENT_ID }}
          password: ${{ secrets.AZURE_CLIENT_PASSWORD }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and export production image
        uses: docker/build-push-action@v5
        with:
          context: .
          tags: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_HASH }}
          target: "production-stage"
          outputs: type=docker,dest=/tmp/prodimage.tar
          secrets: |
            PIP_EXTRA_INDEX_URL=${{ secrets.PIP_EXTRA_INDEX_URL }}
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }},mode=max
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}

      - name: Build and export test image
        uses: docker/build-push-action@v5
        with:
          context: .
          tags: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_HASH }}
          target: "test-stage"
          outputs: type=docker,dest=/tmp/testimage.tar
          secrets: |
            PIP_EXTRA_INDEX_URL=${{ secrets.PIP_EXTRA_INDEX_URL }}  

      - name: upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: testimage
          path: /tmp/testimage.tar

      - name: upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: prodimage
          path: /tmp/prodimage.tar

  test:
    runs-on: ubuntu-latest
    needs: [ build ]
    steps:
      - name: Running Tests
        run: echo "SKIPPED"

#      - name: Checkout repository
#        uses: actions/checkout@v4
#
#      - name: Download artifact
#        uses: actions/download-artifact@v4
#        with:
#          name: testimage
#          path: /tmp
#
#      - name: Load image
#        run: docker load --input /tmp/testimage.tar
#
#      - name: Run pytest in Docker container
#        run: docker run -v ./tests/:/code/tests --rm ${{ env.IMAGE_NAME }}:${{ env.IMAGE_HASH }} pytest

  publish_image:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [ test ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.AZURE_CLIENT_ID }}
          password: ${{ secrets.AZURE_CLIENT_PASSWORD }}

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: prodimage
          path: /tmp
      - name: Load image
        run: docker load --input /tmp/prodimage.tar

      - name: 'Push image'
        uses: azure/docker-login@v2
        with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.AZURE_CLIENT_ID }}
          password: ${{ secrets.AZURE_CLIENT_PASSWORD }}
      - run: docker push ${{ env.IMAGE_NAME }}:${{ env.IMAGE_HASH }}

  deploy_helm_chart:
    runs-on: ubuntu-latest
    needs: [ "publish_image" ]
    permissions:
      actions: read
      contents: read
      id-token: write
    steps:
      - name: Set target environment
        run: |
          if [[ $GITHUB_REF_NAME == 'main' ]]; then
              echo "RESOURCE_GROUP_NAME=optinode" >> "$GITHUB_ENV"
              echo "CLUSTER_NAME=optinode-production" >> "$GITHUB_ENV"
              echo "VALUES_FILE=prod-values.yaml" >> "$GITHUB_ENV"
          elif [[ $GITHUB_REF_NAME == 'develop' ]]; then
              echo "RESOURCE_GROUP_NAME=optinode-staging" >> "$GITHUB_ENV"
              echo "CLUSTER_NAME=optinode-staging" >> "$GITHUB_ENV"
              echo "VALUES_FILE=staging-values.yaml" >> "$GITHUB_ENV"
          fi
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.AZURE_CLIENT_ID }}
          password: ${{ secrets.AZURE_CLIENT_PASSWORD }}

      - name: Log in with Azure
        uses: azure/login@v2
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}'

      - name: Set up kubelogin for non-interactive login
        uses: azure/use-kubelogin@v1
        with:
          kubelogin-version: 'v0.0.25'

      - name: Get K8s context
        uses: azure/aks-set-context@v4
        with:
          resource-group: ${{ env.RESOURCE_GROUP_NAME }}
          cluster-name: ${{ env.CLUSTER_NAME }}
          admin: 'false'
          use-kubelogin: 'true'

      - name: Bake deployment
        uses: azure/k8s-bake@v3
        with:
          renderEngine: 'helm'
          helmChart: './kubernetes'
          helm-version: ${{ env.HELM_VERSION }}
          overrideFiles: './kubernetes/${{ env.VALUES_FILE }}'
        id: bake

      - name: Deploy application
        uses: Azure/k8s-deploy@v5
        with:
          action: deploy
          manifests: ${{ steps.bake.outputs.manifestsBundle }}
          namespace: ${{ env.NAMESPACE }}
          images: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_HASH }}
